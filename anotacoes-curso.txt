-----Enviando um Repositório para o GH-----
° Podemos Facilmente enviar nossos repos para o GitHub;
° Precisamos criar o projeto no GitHub, inicializar o mesmo no git em
nossa máquina, sincronizar com o GitHub e enviar;
° E esta sequência que parece ser complexa é facilmente executada por
poucos comandos;
° Vale lembrar que só fazemos uma vez por projeto este fluxo;
° Porém alguns comandos utilizados vão ser úteis ao longo do curso.

-> Para criar um projeto no GitHub:
01. Vá em Repositories;
02. Aperte no botão verde NEW;
03. Coloque o nome e a descrição;
04. Selecione se o repo vai ser público ou privado;
05. As opções abaixo vc pode add um readme.txt, um .gitignore
06. Ele vai te dar o passo a passo de como fazer o próximo passo no vscode;
07. Seleciona a pasta dos arquivos no VScode;
08. Abre o terminal, e faça os comandos do passo a passo, linha por linha.
----------------------------------------------

-----Verificando as Mudanças do projeto-------
° As mudanças do projeto podem ser verificadas por: git status;
° Este comando é utilizado muito;
° Aqui serão mapeadas todas as alterações do projeto;
° Como: arquivos não monitorados e arquivos modificados;
° Podemos também dizer que a diferença do que já está enviado ao servidor
ou salvo no projeto, ou seja, tudo que aparece no git status, é pq ainda não
foi upado no servidor.

-> Estando dentro do terminal faça: git status;
1. Arquivos UNTRACKED: quando ainda não está sendo mapeado pelo git.
2. Se é feito uma modificação e essa mudança ainda não,
foi enviado ao repo, ele aparece como MODIFIED.(Esse já está no tracked)
---------------------------------------------

-----Adicionando arquivos ao projeto---------
° Para adicionar arquivos a um projeto utilizamos o: git add;
° Podemos adicionar um arquivo específico como também diversos de uma vez só;
° Somente adicionadno arquivos eles serão monitorados pelo git;
° É interessante utilizar este comando de tempos em tempos para n perder nada.

-> Como add um arquivo:
1. Se for um arquivo expecífico: git add (nome do arquivo, ex: index.html);
2. Se for para adicionar um arquivo em outra pasta: git add (diretório, ex: css/style.css);
3. Se quiser add tudo de uma vez só: git add . (ponto). 
----------------------------------------------

-----Salvando alterações----------------------
° As alterações salvas do projeto são realizadas por: git commit;
° Podemos commitar arquivos específicos ou vários de uma vez com a flag -a;
° É uma boa prática enviar uma mensagem a cada commit, com as alterações 
que foram feitas;
° A mensagem pode ser add com a flag -m.

-> Aqui basicamente vamos aprender a commitar:
1. Quando damos um git status ele vai mostrar tudo verdinho,
e isso significa que temos que commitar todos;
2. Para fazer um commit com mensagem, faça: git commit -m "mensagem teste";
3. Para enviar um arvios específico: git commit arquivo.txt -m "mensagem teste";
4. Para mandar os arquivos, faça: git commit -a -m "mensagem teste";
5. Se vc der um git status agora, vai quer que n tem mais nada verdinho.
----------------------------------------------

-----Enviando arquivos para o Servidor---------
° Quando finalizamos uma funcionalidade nova, enviamos o código ao repositório
remoto, que é código-fonte;
° Esta ação é feita pelo git push;
° Após esta ação o código do servidor será atualizado baseando-se no códido 
local enviado.

-> O comando para fazermos o envio de todo o código para o GitHub é o git push;
1. O estado idel para enviar um código é quando vc dá um git status e não tem nada lá
para você enviar; 
2. Se vc der um git status e não aparecer nada, pode dar um git push e todos os seus
arquivos apareceram lá na página do GitHub.
----------------------------------------------

------Recebendo as mudanças-------------------
° É comum também ter que sincronizar o local com as mudanças do remoto;
° Esta ação é feita pelo git pull;
° Após o comando serão buscadas atualizações, se encontradas eleas serão unidas ao código 
atual existente na nossa máquina.

-> Aqui vc vai saber como receber mudanças no código, feitas por outros devs;
1. Se vc der um git pull, e aparecer a mensagem "Already up to date", significa
que tudo já está atualizado. Faça esse comando frequentemente para ver se está usando
a versão mais nova;
2. Vamos fazer o git pull para pegar tudo que tem de novo no GitHub.
3. Podem ser novos arquivos ou até mesmo pequenas atualizações.
-----------------------------------------------

-----Clonando Repositórios----------------------
° O ato de baixar um repositório de um servidor remoto é chamado de "clonar repositório";
° Para esta ação utilizamos o "git clone";
° Passando a referência do repositório remoto;
° Este comando é utilizado quando entramos em um novo projet, por exemplo.

->Esse comando é feito para trazer os arquivos do repo para o seu pc;
1. Quando vc entra em um novo projeto, deve pegar os arquivos upados no GitHub.
2. Para fazer isso deve-se usar o comando "git clone";
3. Vamos no GitHub na área de download do código e selecionamos a url. 
4. Agora vamos no terminal e digitamos "git clone https://github.com/dallisonlima/curso_git_1.git ",
e tudo que tem no repositório será trazido para minha máquina. 
------------------------------------------------
--------Removendo arquivos do repo--------------
° Os arquivos podem ser deletados da monitoração do git;
° O comando para deletar é o git rm;
° Após deletar um arquivo do git ele não terá mais suas atualizações consideradas pelo git;
° Apenas quando for adicionado novamente pelo "git add".

->Usando esse comando o arquivo é apagado do seu diretório;
1. Quando vc usa o git rm, o arquivo é deletado do git e da sua pasta(repositório) consequentemente;
2. Quando isso é feito, é necessário que vc envie essa att ao repositóio com o git push.
------------------------------------------------

--------Histórico de alterações-----------------
° Podemos acessar um log de modificações feitas no projeto;
° O comando para este recurso é "git log";
° Você receberá uma informação dos commits realizados no projeto até então;

->Quando vc está dentro do log, veja o seguinte:
1. Dentro do git log, vc pode faze ro seguinte, ir dando enter e ver até a última (primeira),
alteração que foi feita no seu projeto;
2. Para sair do git log dentro do windows aperte a tecla "q". No linux apert o "CTRL+C".
---------------------------------------

---------Renomeando arquivos--------------
° Com o comando "git mv" podemos renomear um arquivo;
° O mesmo também pode ser movido para outra pasta;
° E isso fará com que este novo arquivo seja monitorado pelo git;
° O arquivo anterior é excluído.

->Com esse comando podermos fazer a alteração de diretório do arq, e tbm renomear;
1. Para fazer a alteração de diretório, podemos fazer da seguinte forma:
git mv (diretorioatual\arqatual.txt) (diretorionovo\aruivoatual.txt) 
2. Para renomear um arquivo, faça da seguinte forma:
git mv (diretorioatual\arqatual.txt) (diretorioatual\arquivonovo.txt)
---------------------------------------------

----------Desfazendo Alterações--------------
° O arquivo modificado pode ser retornado ao estado original;
° O comando utilizado é o "git checkout";
° Após a utilização do mesmo o arquivo sai do staging;
° Caso seja feita uma próxima alteração, ele entra no staging novamente.

-> Esse comando pode ser utilizado para vc voltar ao estado original do arquivo no GitHub;
1. Quando vc faz alguma bosta e quer voltar o arquivo que está mexendo para seu estado atual
no GitHub, vc deve usar esse comando;
2. Esse comando não pode ser utilizado depois de fazer um "git commit";
3. Ao fazer esse comando todas as alterações feitas até o momento são apagadas(reseta) 
e o arquivo volta ao seu estado original. O comando deve ser feito assim:
"git checkout diretorioatual\arqatual.txt"
-------------------------------------------------------------

----------Ignorar arquivos no projeto------------------------
° Uma técnica muito utilizada é ignorar arquivos do projeto;
° Devemos inserir um arquivo chamado .gitignore na raiz do projeto;
° Nele podemos inserir todos os arquivos que NÃO devem entrar no versionamento;
° Isso é útil para arquivos gerados automaticamente ou arquivos que contêm 
informações sensíveis;

-> Basicamente, tudo que vc colocar nesse arquivo não vai ser mandaro ao GitHub;
1. Crie na raiz um arquivo .gitignore;
2. Nesse arquivo pode-se adicionar o nome dos arquivos para que sejam ignorados. 
Observe o exemplo:
-teste.txt (aqui visando ignorar apenas um arquivo)
-node_modules/app.js (aqui visando ignora um arquivo de uma pasta)
-node_modules/* (aqui visando ignora todos os arquivo de uma pasta)
--------------------------------------------------------------

-----------Desfazendo todas as aterações----------------------
° Com o comando "git reset" podemos resetar as mudanças feitas;
° Geralmente é utilizado com a flag --hard;
° Todas as alterações commitadas e também as pendentes serão excluídas.

-> Basicamente, quando vc faz um git reset, vc volta para o original:
1. Quando fazermos um git reset, o comando fica assim:
git reset --hard (branch que queremos resetar)
\_ git reset --hard origin/master
2. Usando o hard, todos os arquivos commitados também serão resetados.
3. O branch, é o repositório que vamos resetar, ou seja, quando selecionamos
um branch é lá que vamos puxar as informações para resetar.
(CUIDADO: ESSE COMANDO APAGA TODO O SEU CÓDIGO NÃO PUSHADO)

---------------------FIM----------------------------------------------------------